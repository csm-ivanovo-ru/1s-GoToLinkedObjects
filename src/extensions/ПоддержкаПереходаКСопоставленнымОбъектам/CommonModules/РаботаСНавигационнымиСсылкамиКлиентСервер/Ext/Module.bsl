#Область ПрограммныйИнтерфейс

// Функция - Получить навигационную ссылку сопоставленного объекта в указанной информационной базе
//
// Параметры:
//  УникальныйИдентификаторОбъекта	 - Строка, УникальныйИдентификатор	 -
//   уникальный идентификтор объекта, для которого будет возвращена навигационная ссылка
//  ТипОбъектаВИнформационнойБазе	 - Строка	 - тип объекта с указанным уникальным идентификатором
//   в указанной базе
//  НавигационнаяСсылкаИнформационнойБазы - Строка	 - навигационная ссылка информационной базы,
//   для объекта в которой запрошена навигационная ссылка
// 
// Возвращаемое значение:
//  Строка - навигационная ссылка для указанного объекта в указанной базе
//
Функция ПолучитьНавигационнуюСсылкуПоРеквизитам(
	Знач УникальныйИдентификаторОбъекта,
	Знач ТипОбъектаВИнформационнойБазе,
	Знач НавигационнаяСсылкаИнформационнойБазы = ""
) Экспорт                         

	Контекст = "РаботаСНавигационнымиСсылкамиКлиентСервер.ПолучитьНавигационнуюСсылкуПоРеквизитам";
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		Контекст,
		"УникальныйИдентификаторОбъекта",
		УникальныйИдентификаторОбъекта,
		Новый ОписаниеТипов("Строка, УникальныйИдентификатор"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		Контекст,
		"ТипОбъектаВИнформационнойБазе",
		ТипОбъектаВИнформационнойБазе,
		Тип("Строка"));
	ОбщегоНазначенияКлиентСервер.Проверить(
		Не ПустаяСтрока(ТипОбъектаВИнформационнойБазе),
		НСтр("ru = 'Недопустимое значение параметра ТипОбъектаВИнформационнойБазе, 
			|Ожидалось наименование типа объекта в информационной базе'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		Контекст);
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		Контекст,
		"НавигационнаяСсылкаИнформационнойБазы",
		НавигационнаяСсылкаИнформационнойБазы,
		Тип("Строка"));
		
	НаименованиеТипаОбъекта = СтрЗаменить(ТипОбъектаВИнформационнойБазе, "Ссылка.", ".");
	ПараметрНавигационнойСсылки = ПолучитьПараметрНавигационнойСсылки(УникальныйИдентификаторОбъекта);
	ВнутренняяНавигационнаяСсылкаОбъекта = "e1cib/data/" + НаименованиеТипаОбъекта + "?ref=" + ПараметрНавигационнойСсылки;

	Если Не ПустаяСтрока(НавигационнаяСсылкаИнформационнойБазы) Тогда
		НавигационнаяСсылкаОбъекта = НавигационнаяСсылкаИнформационнойБазы + "#" + ВнутренняяНавигационнаяСсылкаОбъекта;
	Иначе
		НавигационнаяСсылкаОбъекта = ВнутренняяНавигационнаяСсылкаОбъекта;
	КонецЕсли;

	Возврат НавигационнаяСсылкаОбъекта;

КонецФункции

// Функция - Получить навигационную ссылку информационной базы на сервере 1С
//  по FQDN сервера и имени базы
//
// Параметры:
//  ИмяСервера						 - Строка	 - имя сервера 1С:Предприятие,
//   на котором размещена информационная база
//  ИмяИнформационнойБазы			 - Строка	 - имя информационной базы на указанном сервере
// 
// Возвращаемое значение:
//  Строка - навигационная ссылка указанной информационной базы
//
Функция ПолучитьНавигационнуюСсылкуИнформационнойБазыНаСервереПоРеквизитам(
	Знач ИмяСервера,
	Знач ИмяИнформационнойБазы
) Экспорт                         

	Контекст = "РаботаСНавигационнымиСсылкамиКлиентСервер.ПолучитьНавигационнуюСсылкуИнформационнойБазыНаСервереПоРеквизитам";
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		Контекст,
		"ИмяСервера",
		ИмяСервера,
		Тип("Строка"));
	ОбщегоНазначенияКлиентСервер.Проверить(
		Не ПустаяСтрока(ИмяСервера),
		НСтр("ru = 'Недопустимое значение параметра ИмяСервера, 
			|Ожидалось FQDN имя сервера 1С:Предприятие, на котором размещена информационная база'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		Контекст);
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		Контекст,
		"ИмяИнформационнойБазы",
		ИмяИнформационнойБазы,
		Тип("Строка"));
	ОбщегоНазначенияКлиентСервер.Проверить(
		Не ПустаяСтрока(ИмяИнформационнойБазы),
		НСтр("ru = 'Недопустимое значение параметра ИмяИнформационнойБазы, 
			|Ожидалось имя информационной базы на указанном сервере 1С:Предприятие'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		Контекст);

	НавигационнаяСсылкаИнформационнойБазы = "e1c://server/" + ИмяСервера + "/" + ИмяИнформационнойБазы;

	Возврат НавигационнаяСсылкаИнформационнойБазы;

КонецФункции

// Функция - Получить реквизиты по навигационной ссылке
//
// Параметры:
//  НавигационнаяСсылка 			- Строка	 - навигационная ссылка
// 
// Возвращаемое значение:
//  Структура - представление типа объекта и его уникального идентификатора
//
Функция ПолучитьРеквизитыНавигационнойСсылки(Знач НавигационнаяСсылка) Экспорт                         

	Контекст = "РаботаСНавигационнымиСсылкамиКлиентСервер.ПолучитьРеквизитыНавигационнойСсылки";
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		Контекст,
		"НавигационнаяСсылка",
		НавигационнаяСсылка,
		Тип("Строка"));
		
	СтруктураНавигационнойСсылки = Новый Структура("ТипСсылки");
	
	СтруктураНавигационнойСсылки.ТипСсылки = "Объект";
		
	ПерваяТочка = Найти(НавигационнаяСсылка, "e1cib/data/");
	ВтораяТочка = Найти(НавигационнаяСсылка, "?ref=");

	СтруктураНавигационнойСсылки.Вставить("ИмяТипа",
		Сред(НавигационнаяСсылка, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11));
	СтруктураНавигационнойСсылки.Вставить("УникальныйИдентификаторВнутр",
		Сред(НавигационнаяСсылка, ВтораяТочка + 5));
	СтруктураНавигационнойСсылки.Вставить("УникальныйИдентификатор",
		ЗначениеУникальногоИдентификатораИзСтрокиВнутр(СтруктураНавигационнойСсылки.УникальныйИдентификаторВнутр));

	Возврат СтруктураНавигационнойСсылки;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция - Получить параметр навигационной ссылки по уникальному идентификатору
//
// Параметры:
//  ЗначениеУникальногоИдентификатора	 - УникальныйИдентификатор, Строка	 - уникальный идентификтор объекта,
//   для которого будет возвращен параметр навигационной ссылки
// 
// Возвращаемое значение:
//  Строка - параметр навигационной ссылки
//
Функция ПолучитьПараметрНавигационнойСсылки(Знач ЗначениеУникальногоИдентификатора) Экспорт
	
	Возврат ЗначениеУникальногоИдентификатораВСтрокуВнутр(ЗначениеУникальногоИдентификатора);

КонецФункции

// Функция - преобразование уникального идентификатора во внутренний строковый формат
//
// Параметры:
//  ЗначениеУникальногоИдентификатора	 - УникальныйИдентификатор, Строка
// 
// Возвращаемое значение:
//  Строка - внутреннее строковое представление уникального идентификатора
//
Функция ЗначениеУникальногоИдентификатораВСтрокуВнутр(Знач ЗначениеУникальногоИдентификатора) Экспорт
	
	Контекст = "РаботаСНавигационнымиСсылкамиКлиентСервер.ЗначениеУникальногоИдентификатораВСтрокуВнутр";
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		Контекст,
		"ЗначениеУникальногоИдентификатора",
		ЗначениеУникальногоИдентификатора,
		Новый ОписаниеТипов("Строка, УникальныйИдентификатор"));
		
	Если ТипЗнч(ЗначениеУникальногоИдентификатора) = Тип("Строка") Тогда
		УникальныйИдентификаторВременный = Новый УникальныйИдентификатор(ЗначениеУникальногоИдентификатора);
	Иначе
		УникальныйИдентификаторВременный = ЗначениеУникальногоИдентификатора;
	КонецЕсли;
	УникальныйИдентификаторСтрокой = Строка(УникальныйИдентификаторВременный);
	
	ЗначениеУникальногоИдентификатораВнутр =
		Сред(УникальныйИдентификаторСтрокой, 20, 4)
		+ Сред(УникальныйИдентификаторСтрокой, 25, 12)
		+ Сред(УникальныйИдентификаторСтрокой, 15, 4)
		+ Сред(УникальныйИдентификаторСтрокой, 10, 4)
		+ Лев(УникальныйИдентификаторСтрокой, 8);

	Возврат ЗначениеУникальногоИдентификатораВнутр;

КонецФункции

// Функция - получение уникального идентификатора из внутреннего строкового формата
//
// Параметры:
//  ЗначениеУникальногоИдентификатораВнутр	 - Строка
// 
// Возвращаемое значение:
//  УникальныйИдентификатор - 
//
Функция ЗначениеУникальногоИдентификатораИзСтрокиВнутр(Знач ЗначениеУникальногоИдентификатораВнутр) Экспорт
	
	Контекст = "РаботаСНавигационнымиСсылкамиКлиентСервер.ЗначениеУникальногоИдентификатораИзСтрокиВнутр";
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		Контекст,
		"ЗначениеУникальногоИдентификатораВнутр",
		ЗначениеУникальногоИдентификатораВнутр,
		Тип("Строка"));
		
	ЗначениеУникальногоИдентификатораСтрока =
		Прав(ЗначениеУникальногоИдентификатораВнутр, 8) + "-"
		+ Сред(ЗначениеУникальногоИдентификатораВнутр, 21, 4) + "-"
		+ Сред(ЗначениеУникальногоИдентификатораВнутр, 17, 4) + "-"
		+ Лев(ЗначениеУникальногоИдентификатораВнутр, 4) + "-"
		+ Сред(ЗначениеУникальногоИдентификатораВнутр, 5, 12);

	ЗначениеУникальногоИдентификатора = Новый УникальныйИдентификатор(ЗначениеУникальногоИдентификатораСтрока);
	
	Возврат ЗначениеУникальногоИдентификатора;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
